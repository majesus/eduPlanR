---
title: "dplyr"
author: "Manuel J. Sánchez-Franco"
date: "24-11-2024"
lang: es
language:
  es:
    title-block-author-single: "Autor"
format:
  html:
    theme: [estilos.scss]
    page-layout: article      
    toc: true
    toc-float:
      collapsed: true    # Inicia colapsado
      smooth-scroll: true
      expand: false      # Movido dentro de toc-float
      collapse: true     # Movido dentro de toc-float
    toc-location: right
    toc-title: "Índice"
    toc-depth: 2
    number-sections: true
    remove-header-space: false
    debug-mode: false
    
    embed-resources: true
    
    footnotes-hover: true
    mediaPlanR-font-family: "Roboto Slab, Fraunces, 'Times New Roman', Times, serif"
    section-font-family: "Roboto Slab, Fraunces, 'Times New Roman', Times, serif"
    linkcolor: tomato

project:
  type: website
  output-dir: docs
---

```{r setup}
#| include: false
#| warning: false
#| message: false
#| error: false

knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  error = FALSE,
  eval = FALSE,
  results = 'hide',
  echo = TRUE
)
```

> **dplyr** es un paquete en R desarrollado por Hadley Wickham y su equipo que proporciona un conjunto de herramientas para la manipulación de datos. Es parte del ecosistema **tidyverse**, que es un conjunto de paquetes que comparten principios de diseño y filosofía en común para facilitar el trabajo con datos en R.

# **Introducción a dplyr**

# **Operaciones Básicas**

## Pipe Operator (%>%)

::: {focus-on="cr-mediaPlanR08"}
> [Pipe Operator (%>%) ]{style="color:#000000; font-size: 230%"} 
> <br>
> El operador pipe (%>%) de dplyr facilita la escritura de secuencias de operaciones:
> <br><br>
> - Encadena múltiples funciones de dplyr<br>
> - Mejora la legibilidad del código<br>
> - Evita la creación de variables intermedias<br>
:::

::: {#cr-mediaPlanR08}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Sin usar pipes
resultado <- dplyr::filter(mtcars, mpg > 20)            # <1>
resultado <- dplyr::select(resultado, mpg, cyl, hp)
resultado <- dplyr::arrange(resultado, desc(hp))
head(resultado, 3)

# Usando pipes
mtcars %>%
  dplyr::filter(mpg > 20) %>%                           # <2>
  dplyr::select(mpg, cyl, hp) %>%
  dplyr::arrange(desc(hp)) %>%
  head(3)
```
1. Encadenar operaciones sin pipes
2. Encadenar operaciones con pipes
:::

## 2.2. Select()

::: {focus-on="cr-mediaPlanR01"}
> [Select()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función select() de dplyr manipula columnas de tres formas:
> <br><br>
> - Selecciona qué columnas mantener/descartar<br>
> - Reordena su posición en el data frame<br>
> - Renombra columnas en un solo paso<br>
\
:::

::: {#cr-mediaPlanR01}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Selección simple de columnas
mtcars %>%                                              # <1>
  dplyr::select(mpg, cyl, disp) %>%
  head(3)
# Descarte simple de columnas
mtcars %>%
  dplyr::select(-mpg, -cyl, -disp) %>%                  # <2>
  head(3)
# Selección con renombrado
mtcars %>%
  dplyr::select(cilindros = cyl, consumo = mpg) %>%
  head(3)
```
1. Función select()
2. Descartar columnas
:::

## 2.3. Select Helpers

::: {focus-on="cr-mediaPlanR161"}
> [Select Helpers]{style="color:#000000; font-size: 230%"}
><br>
>Los helpers de select() permiten selección avanzada de columnas:
><br><br>
> - all_of(), any_of(): Seleccionar usando vectores<br>
> - starts_with(), ends_with(): Seleccionar por patronesde texto<br>
> - everything(), last_col(): Seleccionar utilidades<br>
\
:::

::: {#cr-mediaPlanR161}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Seleccionar con vectores de nombres
vars_necesarias <- c("mpg", "hp", "columna_inexistente")
mtcars %>%
  dplyr::select(all_of(c("mpg", "hp"))) %>%           # <1>
  head(3)
# Seleccionar ignorando inexistentes
mtcars %>%
  dplyr::select(any_of(vars_necesarias)) %>%          # <2>
  head(3)
# Seleccionar por patrones de texto
mtcars %>%
  dplyr::select(starts_with("c"), contains("p")) %>%  # <3>
  head(3)
# Funciones de utilidad
mtcars %>%
  dplyr::select(hp, everything()) %>%                 # <4>
  head(3)
mtcars %>%
  dplyr::select(mpg, last_col()) %>%                 # <5>
  head(3)
```

1. all_of() falla si alguna variable no existe
2. any_of() ignora variables inexistentes
3. Seleccionar columnas por patrones de texto
4. everything() selecciona todas las columnas restantes
5. last_col() selecciona la última columna
:::

## Filter()

::: {focus-on="cr-mediaPlanR02"}
> [Filter()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función filter() de dplyr permite filtrar filas basadas en condiciones:
> <br><br>
> - Filtra filas que cumplen una condición lógica<br>
> - Permite combinar múltiples condiciones<br>
> - Soporta operaciones lógicas complejas<br>
\
:::

::: {#cr-mediaPlanR02}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Filtrar filas donde mpg > 20
mtcars %>%
  dplyr::filter(mpg > 20) %>%                            # <1>
  head(3)
# Filtrar filas con múltiples condiciones
mtcars %>%
  dplyr::filter(mpg > 20, cyl == 4) %>%                 # <2>
  head(3)
# Filtrar con operadores lógicos
mtcars %>%
  dplyr::filter(mpg > 20 | hp > 100) %>%                # <3>
  head(3)
```
1. Filtrar filas con una condición
2. Filtrar filas con múltiples condiciones
3. Filtrar filas con operadores lógicos
:::

## Filter Helpers

::: {focus-on="cr-mediaPlanR16"}
> [Filter Helpers]{style="color:#000000; font-size: 230%"} 
> <br>
> Los helpers de filter() permiten filtrado más sofisticado:
> <br><br>
> - between(): Filtrar valores en un rango<br>
> - near(): Comparar números con tolerancia<br>
> - is.na(), !is.na(): Manejar valores NA<br>
\
:::

::: {#cr-mediaPlanR16}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Filtrar valores en un rango
mtcars %>%
  dplyr::filter(between(mpg, 20, 25)) %>%              # <1>
  head(3)

# Comparar números con tolerancia
mtcars %>%
  dplyr::filter(near(mpg, 21, tol = 0.5)) %>%         # <2>
  head(3)

# Filtrar excluyendo NA
mtcars %>%
  dplyr::filter(!is.na(mpg)) %>%                      # <3>
  head(3)
```
1. Usar between() para rangos
2. Usar near() para comparaciones aproximadas
3. Manejar valores NA
:::

## Slice() 

::: {focus-on="cr-mediaPlanR13"}
> [Slice()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función slice() de dplyr selecciona filas por posición:
> <br><br>
> - Selecciona filas específicas por índice<br>
> - Útil para tomar subconjuntos por posición<br>
> - Puede seleccionar rangos o filas específicas<br>
\
:::

::: {#cr-mediaPlanR13}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Seleccionar la primera fila
mtcars %>%
  dplyr::slice(1) %>%                                  # <1>
  head(3)
# Seleccionar múltiples filas
mtcars %>%
  dplyr::slice(1:3) %>%                                # <2>
  head(3)
# Seleccionar filas aleatorias
mtcars %>%
  dplyr::slice_sample(n = 3) %>%                      # <3>
  head(3)
```
1. Seleccionar una fila específica
2. Seleccionar un rango de filas
3. Seleccionar filas aleatorias
:::

## Slice Variations

::: {focus-on="cr-mediaPlanR17"}
> [Slice Variations]{style="color:#000000; font-size: 230%"} 
> <br>
> Las variantes de slice() ofrecen diferentes formas de selección:
> <br><br>
> - slice_head(), slice_tail(): Primeras/últimas filas<br>
> - slice_min(), slice_max(): Filas basadas en valores<br>
> - slice_sample(): Muestreo aleatorio<br>
\
:::

::: {#cr-mediaPlanR17}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Seleccionar primeras filas
mtcars %>%
  dplyr::slice_head(n = 3)                            # <1>

# Seleccionar las filas con valores máximos
mtcars %>%
  dplyr::slice_max(order_by = mpg, n = 3)             # <2>

# Seleccionar muestra aleatoria proporcional
mtcars %>%
  dplyr::slice_sample(prop = 0.1)                     # <3>
```
1. Primeras n filas
2. Top n filas por valor
3. Muestra aleatoria
:::

## Arrange()

::: {focus-on="cr-mediaPlanR03"}
> [Arrange()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función arrange() de dplyr ordena las filas de un data frame:
> <br><br>
> - Ordena en orden ascendente o descendente<br>
> - Puede ordenar por múltiples columnas<br>
> - Mantiene todas las filas<br>
\
:::

::: {#cr-mediaPlanR03}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Ordenar por mpg ascendente
mtcars %>%
  dplyr::arrange(mpg) %>%                                # <1>
  head(3)
# Ordenar por hp descendente
mtcars %>%
  dplyr::arrange(desc(hp)) %>%                          # <2>
  head(3)
# Ordenar por cyl asc y mpg desc
mtcars %>%
  dplyr::arrange(cyl, desc(mpg)) %>%                    # <3>
  head(3)
```
1. Ordenar en orden ascendente
2. Ordenar en orden descendente
3. Ordenar por múltiples columnas
:::

## Distinct()

::: {focus-on="cr-mediaPlanR10"}
> [Distinct()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función distinct() de dplyr elimina filas duplicadas:
> <br><br>
> - Retiene filas únicas<br>
> - Puede especificar columnas para la unicidad<br>
> - Útil para limpiar datos<br>
\
:::

::: {#cr-mediaPlanR10}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Eliminar filas duplicadas basadas en todas las columnas
mtcars %>%
  dplyr::distinct() %>%                                 # <1>
  head(3)
# Eliminar duplicados basados en una columna
mtcars %>%
  dplyr::distinct(cyl, .keep_all = TRUE) %>%           # <2>
  head(3)
# Eliminar duplicados basados en múltiples columnas
mtcars %>%
  dplyr::distinct(cyl, gear, .keep_all = TRUE) %>%    # <3>
  head(3)
```
1. Eliminar duplicados en todas las columnas
2. Eliminar duplicados basados en una columna
3. Eliminar duplicados basados en múltiples columnas
:::

## Distinct() Avanzado

::: {focus-on="cr-mediaPlanR18"}
> [Distinct() Avanzado]{style="color:#000000; font-size: 230%"} 
> <br>
> Opciones avanzadas de distinct() para manejar duplicados:
> <br><br>
> - .keep_all: Mantener todas las columnas<br>
> - Selección de columnas específicas<br>
> - Combinación con otras funciones dplyr<br>
\
:::

::: {#cr-mediaPlanR18}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Mantener todas las columnas al eliminar duplicados
mtcars %>%
  dplyr::distinct(cyl, .keep_all = TRUE) %>%          # <1>
  head(3)

# Distinción por múltiples columnas
mtcars %>%
  dplyr::distinct(cyl, gear, carb) %>%                # <2>
  head(3)

# Combinar con arrange
mtcars %>%
  dplyr::arrange(desc(mpg)) %>%
  dplyr::distinct(cyl, .keep_all = TRUE) %>%          # <3>
  head(3)
```
1. Mantener todas las columnas
2. Distinción múltiple
3. Combinación con arrange
:::

# **Transformación de Datos**

## Mutate() Básico

::: {focus-on="cr-mediaPlanR04"}
> [Mutate() Básico]{style="color:#000000; font-size: 230%"} 
> <br>
> La función mutate() de dplyr añade nuevas columnas o transforma existentes:
> <br><br>
> - Crea nuevas columnas basadas en cálculos<br>
> - Modifica columnas existentes<br>
> - Permite el uso de funciones de resumen<br>
\
:::

::: {#cr-mediaPlanR04}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear una nueva columna de eficiencia
mtcars %>%
  dplyr::mutate(eficiencia = mpg / wt) %>%              # <1>
  head(3)
# Modificar una columna existente
mtcars %>%
  dplyr::mutate(mpg = mpg * 1.1) %>%                    # <2>
  head(3)
# Usar funciones dentro de mutate
mtcars %>%
  dplyr::mutate(log_hp = log(hp)) %>%                   # <3>
  head(3)
```
1. Crear nuevas columnas
2. Modificar columnas existentes
3. Aplicar funciones a columnas
:::

## Mutate() Avanzado

::: {focus-on="cr-mediaPlanR24"}
> [Mutate() Avanzado]{style="color:#000000; font-size: 230%"} 
> <br>
> Funciones avanzadas para manipulación de datos:
> <br><br>
> - case_when() y if_else() para transformaciones condicionales<br>
> - across() para aplicar funciones a múltiples columnas<br>
> - between(), lag() y lead() para análisis de valores<br>
\
:::

::: {#cr-mediaPlanR24}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Usar case_when y if_else
mtcars %>%
  dplyr::mutate(
    potencia = case_when(
      hp < 100 ~ "Baja",
      hp < 200 ~ "Media",
      TRUE ~ "Alta"
    ),
    eficiente = if_else(mpg > 20, "Sí", "No")
  ) %>%                                              # <1>
  head(3)

# Usar across para múltiples columnas
mtcars %>%
  dplyr::mutate(across(c(mpg, hp), round)) %>%      # <2>
  head(3)

# Usar between, lag y lead
mtcars %>%
  dplyr::arrange(mpg) %>%
  dplyr::mutate(
    en_rango = between(mpg, 20, 25),
    mpg_anterior = lag(mpg),
    mpg_siguiente = lead(mpg)
  ) %>%                                             # <3>
  head(3)
```
1. Transformaciones condicionales
2. Aplicar función a múltiples columnas
3. Análisis de valores y secuencias
:::

## Transmute()

::: {focus-on="cr-mediaPlanR12"}
> [Transmute()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función transmute() de dplyr crea nuevas columnas y descarta las existentes:
> <br><br>
> - Similar a mutate(), pero solo mantiene las nuevas columnas<br>
> - Útil para crear subconjuntos de datos transformados<br>
> - Simplifica el data frame resultante<br>
\
:::

::: {#cr-mediaPlanR12}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear nuevas columnas y descartar las originales
mtcars %>%
  dplyr::transmute(consumo = mpg * 1.1,
                   potencia = hp / 2) %>%             # <1>
  head(3)
# Transmute con condiciones
mtcars %>%
  dplyr::transmute(consumo = ifelse(mpg > 20, "Alto", "Bajo"),
                   cilindros = cyl) %>%              # <2>
  head(3)
# Transmute con funciones
mtcars %>%
  dplyr::transmute(log_hp = log(hp),
                   sqrt_disp = sqrt(disp)) %>%        # <3>
  head(3)
```
1. Crear nuevas columnas básicas
2. Transmute con condiciones
3. Transmute usando funciones
:::


## Rename()

::: {focus-on="cr-mediaPlanR09"}
> [Rename()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función rename() de dplyr cambia el nombre de columnas específicas:
> <br><br>
> - Renombra una o más columnas<br>
> - No afecta otras columnas<br>
> - Mantiene el orden de las columnas<br>
\
:::

::: {#cr-mediaPlanR09}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Renombrar una columna
mtcars %>%
  dplyr::rename(consumo = mpg) %>%                      # <1>
  head(3)
# Renombrar múltiples columnas
mtcars %>%
  dplyr::rename(consumo = mpg, cilindros = cyl) %>%      # <2>
  head(3)
# Renombrar y seleccionar
mtcars %>%
  dplyr::rename(consumo = mpg) %>%
  dplyr::select(consumo, everything()) %>%               # <3>
  head(3)
```
1. Renombrar una sola columna
2. Renombrar múltiples columnas
3. Renombrar y reordenar columnas
:::

## Rename_with()

::: {focus-on="cr-mediaPlanR14"}
> [Rename_with()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función rename_with() de dplyr aplica una función a los nombres de columnas:
> <br><br>
> - Transforma nombres de columnas de manera programática<br>
> - Útil para estandarizar o modificar nombres<br>
> - Soporta funciones como tolower, toupper, etc.<br>
\
:::

::: {#cr-mediaPlanR14}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Convertir nombres de columnas a minúsculas
mtcars %>%
  dplyr::rename_with(tolower) %>%                      # <1>
  head(3)
# Añadir prefijo a nombres de columnas
mtcars %>%
  dplyr::rename_with(~ paste0("var_", .)) %>%          # <2>
  head(3)
# Aplicar una función personalizada
mtcars %>%
  dplyr::rename_with(function(x) toupper(x)) %>%      # <3>
  head(3)
```
1. Transformar nombres a minúsculas
2. Añadir prefijos a nombres
3. Aplicar funciones personalizadas a nombres
:::

# **Agregación y Resumen**

## Summarise() Básico

::: {focus-on="cr-mediaPlanR05"}
> [Summarise() Básico]{style="color:#000000; font-size: 230%"} 
> <br>
> La función summarise() de dplyr resume datos mediante cálculos:
> <br><br>
> - Calcula estadísticas resumidas<br>
> - Se usa comúnmente con group_by()<br>
> - Reduce el data frame a una sola fila por grupo<br>
\
:::

::: {#cr-mediaPlanR05}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Resumir con promedio de mpg
mtcars %>%
  dplyr::summarise(promedio_mpg = mean(mpg)) %>%       # <1>
  head(3)
# Resumir con múltiples estadísticas
mtcars %>%
  dplyr::summarise(promedio_mpg = mean(mpg),
                   max_hp = max(hp)) %>%               # <2>
  head(3)
# Resumir por grupos
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::summarise(promedio_mpg = mean(mpg),
                   conteo = n()) %>%                   # <3>
  head(3)
```
1. Resumir con una sola estadística
2. Resumir con múltiples estadísticas
3. Resumir por grupos
:::

## Summarise() Avanzado

::: {focus-on="cr-mediaPlanR20"}
> [Summarise() Avanzado]{style="color:#000000; font-size: 230%"} 
> <br>
> Técnicas avanzadas de resumen:
> <br><br>
> - summarise_all(): Aplicar a todas las columnas<br>
> - summarise_if(): Aplicar condicionalmente<br>
> - summarise_at(): Aplicar a columnas específicas<br>
\
:::

::: {#cr-mediaPlanR20}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Resumir todas las columnas numéricas
mtcars %>%
  dplyr::summarise_all(list(mean = mean, sd = sd)) %>% # <1>
  head(3)

# Resumir columnas que cumplen condición
mtcars %>%
  dplyr::summarise_if(is.numeric, 
                      list(mean = mean, sd = sd)) %>%   # <2>
  head(3)

# Resumir columnas específicas con múltiples funciones
mtcars %>%
  dplyr::summarise_at(vars(mpg, hp),
                      list(min = min, max = max)) %>%   # <3>
  head(3)
```
1. Resumir todas las columnas
2. Resumir condicionalmente
3. Resumir columnas específicas
:::

## Summarise_at()

::: {focus-on="cr-mediaPlanR11"}
> [Summarise_at()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función summarise_at() de dplyr aplica resúmenes a columnas específicas:
> <br><br>
> - Aplica funciones de resumen a un conjunto de columnas<br>
> - Flexibilidad en las funciones utilizadas<br>
> - Facilita resúmenes personalizados<br>
\
:::

::: {#cr-mediaPlanR11}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Resumir múltiples columnas con mean
mtcars %>%
  dplyr::summarise_at(vars(mpg, hp), mean) %>%        # <1>
  head(3)
# Resumir con funciones personalizadas
mtcars %>%
  dplyr::summarise_at(vars(mpg, hp), list(promedio = mean, maximo = max)) %>%  # <2>
  head(3)
# Resumir por grupos con summarise_at
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::summarise_at(vars(mpg, hp), mean) %>%        # <3>
  head(3)
```
1. Resumir múltiples columnas con una función
2. Resumir con múltiples funciones
3. Resumir por grupos con summarise_at
:::

## Group_by() Básico

::: {focus-on="cr-mediaPlanR06"}
> [Group_by() Básico]{style="color:#000000; font-size: 230%"} 
> <br>
> La función group_by() de dplyr agrupa el data frame para operaciones posteriores:
> <br><br>
> - Agrupa filas basadas en una o más columnas<br>
> - Es esencial para cálculos por grupo<br>
> - No modifica el orden de las filas<br>
\
:::

::: {#cr-mediaPlanR06}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Agrupar por número de cilindros
mtcars %>%
  dplyr::group_by(cyl) %>%                             # <1>
  dplyr::summarise(promedio_mpg = mean(mpg)) %>%
  head(3)
# Agrupar por cilindros y transmisión
mtcars %>%
  dplyr::group_by(cyl, am) %>%                         # <2>
  dplyr::summarise(promedio_mpg = mean(mpg)) %>%
  head(3)
# Usar group_by con mutate
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::mutate(promedio_mpg = mean(mpg)) %>%          # <3>
  head(3)
```
1. Agrupar por una columna
2. Agrupar por múltiples columnas
3. Agrupar y mutar
:::

## Group_by() Avanzado

::: {focus-on="cr-mediaPlanR19"}
> [Group_by() Avanzado]{style="color:#000000; font-size: 230%"} 
> <br>
> Técnicas avanzadas de agrupación:
> <br><br>
> - group_by() con múltiples columnas<br>
> - group_modify() para operaciones complejas<br>
> - ungroup() para eliminar agrupaciones<br>
\
:::

::: {#cr-mediaPlanR19}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Agrupación múltiple con cálculos
mtcars %>%
  dplyr::group_by(cyl, am) %>%
  dplyr::summarise(
    mpg_mean = mean(mpg),
    hp_sd = sd(hp)
  ) %>%                                               # <1>
  head(3)

# Usar group_modify para operaciones complejas
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::group_modify(~ head(.x, 2)) %>%              # <2>
  head(3)

# Desagrupar y realizar operaciones
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::mutate(mpg_mean = mean(mpg)) %>%
  dplyr::ungroup() %>%                                # <3>
  dplyr::mutate(overall_diff = mpg - mean(mpg)) %>%
  head(3)
```
1. Agrupación múltiple
2. Operaciones complejas por grupo
3. Desagrupar para cálculos globales
:::

## Count()

::: {focus-on="cr-mediaPlanR15"}
> [Count()]{style="color:#000000; font-size: 230%"} 
> <br>
> La función count() de dplyr cuenta las ocurrencias de combinaciones de variables:
> <br><br>
> - Cuenta frecuencias de combinaciones únicas<br>
> - Simplifica group_by() y summarise(n = n())<br>
> - Útil para análisis exploratorio<br>
\
:::

::: {#cr-mediaPlanR15}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Contar el número de cilindros
mtcars %>%
  dplyr::count(cyl) %>%                                # <1>
  head(3)
# Contar combinaciones de cilindros y gears
mtcars %>%
  dplyr::count(cyl, gear) %>%                         # <2>
  head(3)
# Contar y ordenar por frecuencia
mtcars %>%
  dplyr::count(cyl, sort = TRUE) %>%                  # <3>
  head(3)
```
1. Contar una variable
2. Contar múltiples variables
3. Contar y ordenar por frecuencia
:::


# **Combinación de Datos**

## Join Functions Básicas

::: {focus-on="cr-mediaPlanR07"}
> [Join Functions Básicas]{style="color:#000000; font-size: 230%"} 
> <br>
> Las funciones de join en dplyr combinan data frames basándose en claves:
> <br><br>
> - left_join(), right_join(), inner_join(), full_join()<br>
> - Unen data frames por columnas comunes<br>
> - Manejan duplicados y filas no coincidentes<br>
\
:::

::: {#cr-mediaPlanR07}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear un data frame de fabricantes
fabricantes <- data.frame(
  car = rownames(mtcars),
  fabricante = c("Mazda", "Mazda", "Datsun", "Hornet", "Hornet", 
                 "Valiant", "Duster", "Merc", "Merc", "Merc", 
                 "Merc", "Merc", "Merc", "Merc", "Merc", 
                 "Merc", "Ferrari", "Ferrari", "Ferrari", "Ferrari", 
                 "Ferrari", "Ferrari", "Ferrari", "Ferrari", "Ferrari", 
                 "Ferrari", "Ferrari", "Ferrari", "Ferrari", "Ferrari", 
                 "Ferrari", "Ferrari"))

# left_join ejemplo
mtcars %>%
  dplyr::left_join(fabricantes, by = c("rownames(mtcars)" = "car")) %>%  # <1>
  head(3)

# inner_join ejemplo
mtcars %>%
  dplyr::inner_join(fabricantes, by = c("rownames(mtcars)" = "car")) %>%  # <2>
  head(3)

# full_join ejemplo
mtcars %>%
  dplyr::full_join(fabricantes, by = c("rownames(mtcars)" = "car")) %>%  # <3>
  head(3)
```
1. left_join: mantiene todas las filas del primer data frame
2. inner_join: mantiene solo las filas con claves coincidentes
3. full_join: mantiene todas las filas de ambos data frames
:::

## Join Functions Avanzadas

::: {focus-on="cr-mediaPlanR23"}
> [Join Functions Avanzadas]{style="color:#000000; font-size: 230%"} 
> <br>
> Funciones adicionales de join para combinar datasets:
> <br><br>
> - right_join() mantiene todas las filas del segundo dataset<br>
> - semi_join() mantiene filas que tienen coincidencias<br>
> - anti_join() mantiene filas sin coincidencias<br>
\
:::

::: {#cr-mediaPlanR23}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear datos de ejemplo
fabricantes <- data.frame(
  cyl = c(4, 6, 8),
  tipo = c("Económico", "Medio", "Deportivo")
)

# Usar right_join
mtcars %>%
  dplyr::right_join(fabricantes, by = "cyl") %>%     # <1>
  head(3)

# Usar semi_join
mtcars %>%
  dplyr::semi_join(fabricantes, by = "cyl") %>%      # <2>
  head(3)

# Usar anti_join
mtcars %>%
  dplyr::anti_join(fabricantes, by = "cyl") %>%      # <3>
  head(3)
```
1. Mantiene todas las filas de fabricantes
2. Solo filas de mtcars con coincidencias
3. Solo filas de mtcars sin coincidencias
:::

# **Funciones Auxiliares**

## Row Names Management

::: {focus-on="cr-mediaPlanR22"}
> [Row Names Management]{style="color:#000000; font-size: 230%"} 
> <br>
> Las funciones de manejo de nombres de filas facilitan su manipulación:
> <br><br>
> - Convertir una columna en nombres de fila: column_to_rownames()<br>
> - Conbertir nombres de fila en una columna: rownames_to_column()<br>
> - Útiles para reorganizar la estructura de datos<br>
\
:::

::: {#cr-mediaPlanR22}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Convertir nombres de fila a columna
mtcars %>%
  tibble::rownames_to_column(var = "modelo") %>%      # <1>
  head(3)

# Convertir columna a nombres de fila
mtcars %>%
  tibble::rownames_to_column(var = "modelo") %>%
  tibble::column_to_rownames(var = "modelo") %>%      # <2>
  head(3)

# Combinar con otras operaciones
mtcars %>%
  tibble::rownames_to_column(var = "modelo") %>%
  dplyr::select(modelo, mpg, hp) %>%                  # <3>
  head(3)
```
1. Convertir nombres de fila a columna
2. Convertir columna a nombres de fila
3. Combinar con otras operaciones
:::

## NA Handling & Pull

::: {focus-on="cr-mediaPlanR25"}
> [NA Handling & Pull]{style="color:#000000; font-size: 230%"} 
> <br>
> Funciones para manejar valores NA y extraer datos:
> <br><br>
> - coalesce() y replace_na() para manejar valores faltantes<br>
> - pull() para extraer una columna como vector<br>
> - Útiles para limpieza y extracción de datos<br>
\
:::

::: {#cr-mediaPlanR25}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear datos con NA
datos_na <- mtcars %>%
  dplyr::mutate(mpg = replace(mpg, c(1,3,5), NA))

# Usar coalesce y replace_na
datos_na %>%
  dplyr::mutate(
    mpg_coal = coalesce(mpg, mean(mpg, na.rm = TRUE)),    # <1>
    mpg_repl = replace_na(mpg, 20)                        # <2>
  ) %>%                                             
  head(3)

# Usar pull para extraer valores
media_mpg <- mtcars %>%   
  dplyr::pull(mpg) %>%                                    # <3>              
  mean()

# Combinar pull con otras operaciones
peso_ref_por_cyl <- mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::summarise(peso_ref = mean(wt)) %>%
  dplyr::pull(peso_ref, name = cyl)                       # <4>
```
1. Reemplaza NA en mpg por la media de mpg
1. Reemplaza NA en mpg por el valor 20
2. Extraer columna como vector
3. Pull con nombres
:::

___
