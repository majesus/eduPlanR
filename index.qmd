---
title: "dplyr"
author: "Manuel J. Sánchez-Franco"
lang: es
language:
  es:
    title-block-author-single: "Autor"
format:
  html:
    theme: [estilos.scss]
    page-layout: article      
    toc: true
    toc-float:
      collapsed: true
      smooth-scroll: true
    toc-location: left       # Cambiado de 'right' a 'left'
    toc-title: "Índice"
    toc-depth: 2
    number-sections: true
    embed-resources: true
    footnotes-hover: true
    mediaPlanR-font-family: "Roboto Slab, Fraunces, 'Times New Roman', Times, serif"
    section-font-family: "Roboto Slab, Fraunces, 'Times New Roman', Times, serif"
    linkcolor: tomato
---


```{r setup}
#| include: false
#| warning: false
#| message: false
#| error: false

knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  error = FALSE,
  eval = FALSE,
  results = 'hide',
  echo = TRUE
)
```

# **Introducción a dplyr**

> **dplyr** es un paquete en R desarrollado por Hadley Wickham y su equipo que proporciona un conjunto de herramientas para la manipulación de datos. Es parte del ecosistema **tidyverse**, que es un conjunto de paquetes que comparten principios de diseño y filosofía en común para facilitar el trabajo con datos en R.

# **Operaciones Básicas**

## Pipe Operator

::: {focus-on="cr-mediaPlanR08"}
> []{style="color:#000000; font-size: 230%"} 
> El operador **pipe %>%** de dplyr facilita la escritura de secuencias de operaciones:
> <br><br>
> - Encadena múltiples funciones de dplyr<br>
> - Mejora la legibilidad del código<br>
> - Evita la creación de variables intermedias<br>
:::

::: {#cr-mediaPlanR08}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Sin usar pipes
resultado <- dplyr::filter(mtcars, mpg > 20)            # <1>
resultado <- dplyr::select(resultado, mpg, cyl, hp)
resultado <- dplyr::arrange(resultado, desc(hp))
head(resultado, 3)

# Usando pipes
mtcars %>%
  dplyr::filter(mpg > 20) %>%                           # <2>
  dplyr::select(mpg, cyl, hp) %>%
  dplyr::arrange(desc(hp)) %>%
  head(3)
```
1. Encadenar operaciones sin pipes, %>%
2. Encadenar operaciones con pipes, %>%
:::

## Select()

::: {focus-on="cr-mediaPlanR01"}
> []{style="color:#000000; font-size: 230%"} 
> La función select() de dplyr manipula columnas de tres formas:
> <br><br>
> - Selecciona qué columnas mantener/descartar<br>
> - Reordena su posición en el data frame<br>
> - Renombra columnas en un solo paso<br>
\
:::

::: {#cr-mediaPlanR01}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Selección simple de columnas
mtcars %>%                                              
  dplyr::select(mpg, cyl, disp) %>%                     # <1>
  head(3)
# Descarte simple de columnas
mtcars %>%
  dplyr::select(-mpg, -cyl, -disp) %>%                  # <2>
  head(3)
# Selección con renombrado
mtcars %>%
  dplyr::select(cilindros = cyl, consumo = mpg) %>%     # <3>
  head(3)
```
1. Selecciona y reordena columnas
2. Descarta columnas
3. Selecciona, reordena y renombra columnas
:::

## Select Helpers

::: {focus-on="cr-mediaPlanR161"}
> []{style="color:#000000; font-size: 230%"}
>Los helpers de select() permiten selección avanzada de columnas:
><br><br>
> - all_of(), any_of(): Seleccionar usando vectores<br>
> - starts_with(), ends_with(): Seleccionar por patronesde texto<br>
> - everything(), last_col(): Seleccionar utilidades<br>
\
:::

::: {#cr-mediaPlanR161}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Seleccionar con vectores de nombres
vars_necesarias <- c("mpg", "hp", "columna_inexistente")
mtcars %>%
  dplyr::select(all_of(c("mpg", "hp"))) %>%           # <1>
  head(3)
# Seleccionar ignorando inexistentes
mtcars %>%
  dplyr::select(any_of(vars_necesarias)) %>%          # <2>
  head(3)
# Seleccionar por patrones de texto
mtcars %>%
  dplyr::select(starts_with("c"), contains("p")) %>%  # <3>
  head(3)
# Funciones de utilidad
mtcars %>%
  dplyr::select(hp, everything()) %>%                 # <4>
  head(3)
mtcars %>%
  dplyr::select(mpg, last_col()) %>%                  # <5>
  head(3)
mtcars %>%
  dplyr::select(mpg, last_col(1)) %>%                  # <6>
  head(3)
```

1. all_of() falla si alguna variable no existe
2. any_of() ignora variables inexistentes
3. Seleccionar columnas por patrones de texto
4. reordena: mpg y todas columnas restantes
5. last_col() selecciona la última columna
6. last_col(1) selecciona la penúltima columna
:::

## Filter()

::: {focus-on="cr-mediaPlanR02"}
> []{style="color:#000000; font-size: 230%"} 
> La función filter() de dplyr permite filtrar filas basadas en condiciones:
> <br><br>
> - Filtra filas que cumplen una condición lógica<br>
> - Permite combinar múltiples condiciones<br>
> - Soporta operaciones lógicas complejas<br>
\
:::

::: {#cr-mediaPlanR02}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Filtrar filas donde mpg > 20
mtcars %>%
  dplyr::filter(mpg > 20) %>%                            # <1>
  head(3)
# Filtrar filas con múltiples condiciones
mtcars %>%
  dplyr::filter(mpg > 20, cyl == 4) %>%                 # <2>
  head(3)
# Filtrar con operadores lógicos
mtcars %>%
  dplyr::filter(mpg > 20 | hp > 100) %>%                # <3>
  head(3)
```
1. Filtrar filas con una condición
2. Filtrar filas con múltiples condiciones
3. Filtrar filas con operadores lógicos
:::

## Filter Helpers

::: {focus-on="cr-mediaPlanR16"}
> []{style="color:#000000; font-size: 230%"} 
> <br>
> Los helpers de filter() permiten filtrado más sofisticado:
> <br><br>
> - between(): Filtrar valores en un rango<br>
> - near(): Comparar números con tolerancia<br>
> - is.na(), !is.na(): Manejar valores NA<br>
\
:::

::: {#cr-mediaPlanR16}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Filtrar valores en un rango
mtcars %>%
  dplyr::filter(between(mpg, 20, 25)) %>%              # <1>
  head(3)

# Comparar números con tolerancia
mtcars %>%
  dplyr::filter(near(mpg, 21, tol = 0.5)) %>%         # <2>
  head(3)

# Filtrar excluyendo NA
mtcars %>%
  dplyr::filter(!is.na(mpg)) %>%                      # <3>
  head(3)
```
1. Filtra valores dentro de un intervalo inclusivo [a,b]
2. Filtra mediante comparaciones con tolerancia numérica
3. Maneja y filtra valores NA explícitamente
:::

## Filter Extensions

::: {focus-on="cr-mediaPlanR30"}
> []{style="color:#000000; font-size: 230%"} 
> Funciones avanzadas para filtrado múltiple:
> <br><br>
> - if_any(): filtra filas donde AL MENOS UNA variable cumple su condición<br>
> - if_all(): filtra filas donde TODAS las variables cumplen su condición<br>
> - Útil para condiciones complejas en múltiples columnas<br>
\
:::

::: {#cr-mediaPlanR30}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Primero, veamos las medias de referencia
mtcars %>%
  summarise(
    media_hp = mean(hp),    # Es 146.7
    media_mpg = mean(mpg)   # Es 20.1
  )
# Filtrado con if_any (OR lógico)
mtcars %>%
  filter(if_any(c(hp, mpg), ~ . > mean(.))) %>%    # <1>
  select(hp, mpg) %>%
  arrange(desc(hp)) %>%
  head(3)
# Filtrado con if_all (AND lógico)
mtcars %>%
  filter(if_all(c(hp, mpg), ~ . < mean(.))) %>%    # <2>
  select(hp, mpg) %>%
  arrange(desc(hp))
```
1. Mantiene filas donde hp > 146.7 **O** mpg > 20.1 (basta una condición)
2. Mantiene filas donde hp < 146.7 **Y** mpg < 20.1 (ambas condiciones)
:::

## Slice

::: {focus-on="cr-mediaPlanR13"}
> []{style="color:#000000; font-size: 230%"} 
> La función slice() de dplyr selecciona filas por posición:
> <br><br>
> - Selecciona filas específicas por índice<br>
> - Útil para tomar subconjuntos por posición<br>
> - Puede seleccionar rangos o filas específicas<br>
\
:::

::: {#cr-mediaPlanR13}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Seleccionar la primera fila
mtcars %>%
  dplyr::slice(1) %>%                                  # <1>
  head(3)
# Seleccionar la primera fila
mtcars %>%
  dplyr::slice(1, 4) %>%                               # <2>
  head(3)
# Seleccionar múltiples filas
mtcars %>%
  dplyr::slice(1:3) %>%                                # <3>
  head(3)
```
1. Selecciona una fila específica
2. Selecciona varias filas específicas
3. Selecciona un rango de filas
:::

## Slice Variations

::: {focus-on="cr-mediaPlanR17"}
> []{style="color:#000000; font-size: 230%"} 
> Las variantes de slice() ofrecen diferentes formas de selección:
> <br><br>
> - slice_head(), slice_tail(): Primeras/últimas filas<br>
> - slice_min(), slice_max(): Filas basadas en valores máximos o mínimos<br>
> - slice_sample(): Muestreo aleatorio<br>
\
:::

::: {#cr-mediaPlanR17}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Seleccionar primeras filas
mtcars %>%
  dplyr::slice_head(n = 3)                                   # <1>
# Seleccionar las filas con valores máximos
mtcars %>%
  dplyr::slice_max(order_by = mpg, n = 3, with_ties = TRUE)  # <2>
# Seleccionar las filas con valores máximos
mtcars %>%
  dplyr::slice_min(order_by = mpg, n = 3, with_ties = TRUE)  # <3>
# Seleccionar muestra aleatoria n filas
mtcars %>%
  dplyr::slice_sample(n = 10, replace = FALSE)               # <4>
# Seleccionar muestra aleatoria prop de filas
mtcars %>%
  dplyr::slice_sample(prop = 0.1, replace = FALSE)           # <5>
# Seleccionar muestra aleatoria prop de filas
mtcars %>%
  dplyr::slice_sample(prop = 0.1, by = cyl, replace = FALSE) # <6>
```
1. Selecciona las primeras n filas
2. Selecciona las _top n filas_ por valor max
3. Selecciona las _top n filas_ por valor min
4. Muestra aleatoria de n filas
5. Muestra aleatoria de proporción de filas
5. Muestra aleatoria de proporción de filas por variable
:::

## Arrange

::: {focus-on="cr-mediaPlanR03"}
> []{style="color:#000000; font-size: 230%"} 
> La función arrange() de dplyr ordena las filas de un data frame:
> <br><br>
> - Ordena en orden ascendente o descendente<br>
> - Puede ordenar por múltiples columnas<br>
> - Mantiene todas las filas<br>
\
:::

::: {#cr-mediaPlanR03}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Ordenar por mpg ascendente
mtcars %>%
  dplyr::arrange(mpg) %>%                                # <1>
  head(3)
# Ordenar por hp descendente
mtcars %>%
  dplyr::arrange(desc(hp)) %>%                          # <2>
  head(3)
# Ordenar por cyl ascendente, y mpg descendente
mtcars %>%
  dplyr::arrange(cyl, desc(mpg)) %>%                    # <3>
  head(3)
```
1. Ordena en orden ascendente
2. Ordena en orden descendente
3. Ordena por múltiples columnas
:::

## Relocate

::: {focus-on="cr-mediaPlanR27"}
> []{style="color:#000000; font-size: 230%"}
> La función relocate() reposiciona columnas en el dataset:
> <br><br>
> 
> - Mueve columnas a posiciones específicas<br>
> - Acepta helpers como starts_with(), contains()<br>
> - Más flexible que select() para reordenar<br>
\
:::

::: {#cr-mediaPlanR27}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
# Mover columnas al inicio
mtcars %>%
  dplyr::relocate(hp, cyl) %>%                       # <1>
  head(3)

# Mover columnas después de una específica
mtcars %>%
  dplyr::relocate(carb, .after = mpg) %>%            # <2>
  head(3)
# Mover columnas antes de una específica
mtcars %>%
  dplyr::relocate(hp, .before = mpg) %>%             # <3>
  head(3)
```
1. Mueve columnas al inicio del dataset
2. Reposiciona después de una columna específica
3. Reposiciona antes de una columna específica
:::

## Distinct

::: {focus-on="cr-mediaPlanR10"}
> []{style="color:#000000; font-size: 230%"} 
> La función distinct() elimina filas duplicadas:
> <br><br>
> - Retiene filas únicas<br>
> - Puede especificar columnas para la unicidad<br>
> - Útil para limpiar datos<br>
\
:::

::: {#cr-mediaPlanR10}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Eliminar filas duplicadas basadas en todas las columnas
mtcars %>%
  dplyr::distinct() %>%                                 # <1>
  head(3)
# Eliminar duplicados basados en una columna
mtcars %>%
  dplyr::distinct(cyl, .keep_all = TRUE) %>%           # <2>
  head(3)
# Eliminar duplicados basados en múltiples columnas
mtcars %>%
  dplyr::distinct(cyl, gear, .keep_all = TRUE) %>%     # <3>
  head(3)
```
1. Elimina duplicados en todas las columnas
2. Elimina duplicados basados en una columna, mantener todas las columnas
3. Elimina duplicados basados en múltiples columnas
:::

# **Transformación de Datos**

## Mutate Básico

::: {focus-on="cr-mediaPlanR04"}
> []{style="color:#000000; font-size: 230%"} 
> La función mutate() añade nuevas columnas o transforma existentes:
> <br><br>
> - Crea nuevas columnas basadas en cálculos<br>
> - Modifica columnas existentes<br>
> - Permite el uso de funciones de resumen<br>
\
:::

::: {#cr-mediaPlanR04}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear una nueva columna de eficiencia
mtcars %>%
  dplyr::mutate(eficiencia = mpg / wt) %>%              # <1>
  head(3)
# Modificar una columna existente
mtcars %>%
  dplyr::mutate(mpg = mpg * 1.1) %>%                    # <2>
  head(3)
# Usar funciones dentro de mutate
mtcars %>%
  dplyr::mutate(log_hp = log(hp)) %>%                   # <3>
  head(3)
# Calcular el ranking por mpg
mtcars %>%
 dplyr::mutate(rank = dense_rank(desc(mpg))) %>%        # <4>
 head(3)
```
1. Crea nuevas columnas
2. Modifica columnas existentes
3. Aplica funciones a columnas
4. Asigna rangos consecutivos pero da el mismo rango a valores iguales, sin dejar huecos en la secuencia
:::

## Mutate Avanzado

::: {focus-on="cr-mediaPlanR24"}
> []{style="color:#000000; font-size: 230%"} 
> Funciones avanzadas para manipulación de datos:
> <br><br>
> - case_when() y if_else() para transformaciones condicionales<br>
> - across() para aplicar funciones a múltiples columnas<br>
> - between(), lag() y lead() para análisis de valores<br>
\
:::

::: {#cr-mediaPlanR24}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Usar case_when y if_else
mtcars %>%
  dplyr::mutate(
    potencia = case_when(
      hp < 100 ~ "Baja",
      hp < 200 ~ "Media",
      TRUE ~ "Alta"
    ),
    eficiente = if_else(mpg > 20, "Sí", "No")
  ) %>%                                              # <1>
  head(3)

# Usar across para múltiples columnas
mtcars %>%
  dplyr::mutate(across(c(mpg, hp), round)) %>%      # <2>
  head(3)

# Usar between, lag y lead
mtcars %>%
  dplyr::arrange(mpg) %>%
  dplyr::mutate(
    en_rango = between(mpg, 20, 25),
    mpg_anterior = lag(mpg),
    mpg_siguiente = lead(mpg)
  ) %>%                                             # <3>
  head(3)
```
1. Transforma basado en condiciones múltiples con case_when
2. Aplica transformaciones a múltiples columnas simultáneamente con across()
3. Analiza valores relativos y secuencias temporales
:::

## Transmute

::: {focus-on="cr-mediaPlanR12"}
> []{style="color:#000000; font-size: 230%"} 
> La función transmute() crea nuevas columnas y descarta las existentes:
> <br><br>
> - Similar a mutate(), pero solo mantiene las nuevas columnas<br>
> - Útil para crear subconjuntos de columnas transformadas<br>
> - Simplifica el data frame resultante<br>
\
:::

::: {#cr-mediaPlanR12}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear nuevas columnas y descartar las originales
mtcars %>%
  dplyr::transmute(consumo = mpg * 1.1,
                   potencia = hp / 2) %>%             # <1>
  head(3)
# Transmute con condiciones
mtcars %>%
  dplyr::transmute(consumo = ifelse(mpg > 20, "Alto", "Bajo"),
                   cilindros = cyl) %>%              # <2>
  head(3)
# Transmute con funciones
mtcars %>%
  dplyr::transmute(log_hp = log(hp),
                   sqrt_disp = sqrt(disp)) %>%        # <3>
  head(3)
```
1. Crea nuevas columnas básicas, y descarta las originales
2. _Transmuta_ con condiciones
3. _Transmuta_ usando funciones
:::


## Rename

::: {focus-on="cr-mediaPlanR09"}
> []{style="color:#000000; font-size: 230%"} 
> La función rename() cambia el nombre de columnas específicas:
> <br><br>
> - Renombra una o más columnas<br>
> - No afecta a otras columnas<br>
> - Mantiene el orden de las columnas<br>
\
:::

::: {#cr-mediaPlanR09}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Renombrar una columna
mtcars %>%
  dplyr::rename(consumo = mpg) %>%                      # <1>
  head(3)
# Renombrar múltiples columnas
mtcars %>%
  dplyr::rename(consumo = mpg, cilindros = cyl) %>%      # <2>
  head(3)
# Renombrar y seleccionar
mtcars %>%
  dplyr::rename(consumo = mpg) %>%
  dplyr::select(consumo, everything()) %>%               # <3>
  head(3)
```
1. Renombra una sola columna
2. Renombra múltiples columnas
3. Renombra, y posteriormente reordena columnas
:::

## Rename_with

::: {focus-on="cr-mediaPlanR14"}
> []{style="color:#000000; font-size: 230%"} 
> La función rename_with() aplica una función a los nombres de columnas:
> <br><br>
> - Transforma nombres de columnas de manera programática<br>
> - Útil para estandarizar o modificar nombres<br>
> - Soporta funciones como tolower, toupper, etc.<br>
\
:::

::: {#cr-mediaPlanR14}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Convertir nombres de columnas a minúsculas
mtcars %>%
  dplyr::rename_with(tolower) %>%                      # <1>
  head(3)
# Añadir prefijo a nombres de columnas
mtcars %>%
  dplyr::rename_with(~ paste0("var_", .)) %>%          # <2>
  head(3)
# Aplicar una función personalizada
mtcars %>%
  dplyr::rename_with(function(x) toupper(x)) %>%      # <3>
  head(3)
```
1. Transforma nombres a minúsculas
2. Añade prefijos a nombres
3. Aplica funciones personalizadas (e.g., mayúsculas) a nombres
:::

# Agregación y Resumen

## Summarise Básico

::: {focus-on="cr-mediaPlanR05"}
> []{style="color:#000000; font-size: 230%"} 
> La función summarise() resume datos mediante cálculos:
> <br><br>
> - Calcula estadísticas resumidas<br>
> - Se usa comúnmente con group_by()<br>
> - Reduce el data frame a una sola fila por grupo<br>
\
:::

::: {#cr-mediaPlanR05}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Resumir con promedio de mpg
mtcars %>%
  dplyr::summarise(promedio_mpg = mean(mpg)) %>%       # <1>
  head(3)
# Resumir con múltiples estadísticas
mtcars %>%
  dplyr::summarise(promedio_mpg = mean(mpg),
                   max_hp = max(hp)) %>%               # <2>
  head(3)
# Resumir por grupos
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::summarise(promedio_mpg = mean(mpg),
                   conteo = n()) %>%                   # <3>
  head(3)
```
1. Resume con una sola estadística
2. Resume con múltiples estadísticas
3. Resume por grupos
:::

## Summarise Avanzado

::: {focus-on="cr-mediaPlanR20"}
> []{style="color:#000000; font-size: 230%"} 
> Técnicas avanzadas de resumen:
> <br><br>
> - summarise_all() aplica a todas las columnas<br>
> - summarise_if() aplica condicionalmente<br>
> - summarise_at() aplica a columnas específicas<br>
\
:::

::: {#cr-mediaPlanR20}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Resumir todas las columnas numéricas
mtcars %>%
  dplyr::summarise_all(list(mean = mean, sd = sd)) %>%  # <1>
  head(3)

# Resumir columnas que cumplen condición
mtcars %>%
  dplyr::summarise_if(is.numeric, 
                      list(mean = mean, sd = sd)) %>%   # <2>
  head(3)

# Resumir columnas específicas con múltiples funciones
mtcars %>%
  dplyr::summarise_at(vars(mpg, hp),
                      list(min = min, max = max)) %>%   # <3>
  head(3)
```
1. Resume todas las columnas
2. Resume condicionalmente
3. Resume columnas específicas
:::

## Group_by Básico

::: {focus-on="cr-mediaPlanR06"}
> []{style="color:#000000; font-size: 230%"} 
> La función group_by() agrupa el data frame para operaciones posteriores:
> <br><br>
> - Agrupa filas basadas en una o más columnas<br>
> - Es esencial para cálculos por grupo<br>
> - No modifica el orden de las filas<br>
\
:::

::: {#cr-mediaPlanR06}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Agrupar por número de cilindros
mtcars %>%
  dplyr::group_by(cyl) %>%                             # <1>
  dplyr::summarise(promedio_mpg = mean(mpg)) %>%
  head(3)
# Usar group_by con mutate
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::mutate(promedio_mpg = mean(mpg)) %>%          # <2>
  head(3)
# Agrupar por cilindros y transmisión
mtcars %>%
  dplyr::group_by(cyl, am) %>%                         # <3>
  dplyr::summarise(promedio_mpg = mean(mpg)) %>%
  head(3)
```
1. Agrupa por una columna
3. Agrupa y muta (transforma) por una columna
2. Agrupa por múltiples columnas
:::

## Group_by Avanzado

::: {focus-on="cr-mediaPlanR19"}
> []{style="color:#000000; font-size: 230%"} 
> Técnicas avanzadas de agrupación:
> <br><br>
> - group_modify() para operaciones complejas<br>
> - ungroup() para eliminar agrupaciones<br>
\
:::

::: {#cr-mediaPlanR19}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
# Usar group_modify para operaciones complejas
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::group_modify(~ head(.x, 2))                  # <1>
# Desagrupar y realizar operaciones
mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::mutate(mpg_mean = mean(mpg)) %>%
  dplyr::ungroup() %>%                                # <2>
  dplyr::mutate(overall_diff = mpg - mean(mpg)) %>%
  head(3)
```
1. Ejecuta una función personalizada en cada grupo manteniendo la estructura
2. Elimina agrupación para cálculos a nivel global
:::

## Count

::: {focus-on="cr-mediaPlanR15"}
> []{style="color:#000000; font-size: 230%"} 
> La función count() de dplyr cuenta las ocurrencias de combinaciones de variables:
> <br><br>
> - Cuenta frecuencias de combinaciones únicas<br>
> - Simplifica group_by() y summarise(n = n())<br>
> - Útil para análisis exploratorio<br>
\
:::

::: {#cr-mediaPlanR15}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Contar el número de cilindros
mtcars %>%
  dplyr::count(cyl) %>%                                # <1>
  head(3)
# Contar combinaciones de cilindros y gears
mtcars %>%
  dplyr::count(cyl, gear) %>%                         # <2>
  head(3)
# Contar y ordenar por frecuencia
mtcars %>%
  dplyr::count(cyl, sort = TRUE) %>%                  # <3>
  head(3)
```
1. Cuenta valores de una variable
2. Cuenta valores de múltiples variables
3. Cuenta valores de una variable, y ordena por frecuencia
:::

# **Combinación de Datos**

## Join Functions Básicas

::: {focus-on="cr-mediaPlanR07"}
> []{style="color:#000000; font-size: 230%"} 
> Las funciones de join en dplyr combinan data frames basándose en claves:
> <br><br>
> - left_join(), right_join(), inner_join(), full_join()<br>
> - Unen data frames por columnas comunes<br>
> - Manejan duplicados y filas no coincidentes<br>
\
:::

::: {#cr-mediaPlanR07}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)

# Crear un data frame de fabricantes con los nombres reales de los modelos del dataset mtcars
fabricantes <- data.frame(
  car = rownames(mtcars),
  fabricante = c(
    "Mazda", "Mazda",           # Mazda RX4 y RX4 Wag
    "Datsun",                   # Datsun 710
    "AMC", "AMC",               # Hornet 4 Drive y Hornet Sportabout
    "Plymouth",                 # Valiant
    "Plymouth",                 # Duster 360
    "Mercedes", "Mercedes",     # Merc 240D y Merc 230
    "Mercedes", "Mercedes",     # Merc 280 y Merc 280C
    "Mercedes", "Mercedes",     # Merc 450SE y Merc 450SL
    "Mercedes", "Mercedes",     # Merc 450SLC y Cadillac
    "Lincoln",                  # Lincoln Continental
    "Chrysler",                 # Chrysler Imperial
    "Fiat",                     # Fiat 128
    "Honda",                    # Honda Civic
    "Toyota",                   # Toyota Corolla
    "Toyota",                   # Toyota Corona
    "Dodge",                    # Dodge Challenger
    "AMC",                      # AMC Javelin
    "Camaro",                   # Camaro Z28
    "Pontiac",                  # Pontiac Firebird
    "Fiat",                     # Fiat X1-9
    "Porsche",                  # Porsche 914-2
    "Lotus",                    # Lotus Europa
    "Ford",                     # Ford Pantera L
    "Ferrari",                  # Ferrari Dino
    "Maserati"                  # Maserati Bora
  )
)
# left_join ejemplo
mtcars %>%
  dplyr::left_join(fabricantes, by = c("rownames(mtcars)" = "car")) %>%  # <1>
  head(3)
# inner_join ejemplo
mtcars %>%
  dplyr::inner_join(fabricantes, by = c("rownames(mtcars)" = "car")) %>% # <2>
  head(3)
# full_join ejemplo
mtcars %>%
  dplyr::full_join(fabricantes, by = c("rownames(mtcars)" = "car")) %>% # <3>
  head(3)
```
1. Mantiene todas las filas del primer dataset, añadiendo coincidencias del segundo
2. Mantiene solo registros con correspondencia exacta en ambas tablas
3. Mantiene todos los registros, coincidan o no
:::

## Join Functions Básicas (sig.)

::: {focus-on="cr-mediaPlanR23"}
> []{style="color:#000000; font-size: 230%"} 
> Funciones adicionales de join para combinar datasets:
> <br><br>
> - semi_join() mantiene filas que tienen coincidencias, pero solo mantiene las columnas de la primera tabla<br>
> - anti_join() mantiene filas sin coincidencias<br>
\
:::

::: {#cr-mediaPlanR23}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear datos de ejemplo
fabricantes <- data.frame(
  cyl = c(4, 6, 8),
  tipo = c("Económico", "Medio", "Deportivo")
)
# Usar semi_join
mtcars %>%
  dplyr::semi_join(fabricantes, by = "cyl") %>%      # <1>
  head(3)
# Usar anti_join
mtcars %>%
  dplyr::anti_join(fabricantes, by = "cyl") %>%      # <2>
  head(3)
```
1. Solo filas de mtcars con coincidencias, pero solo mantiene las columnas de la primera tabla
2. Solo filas de mtcars sin coincidencias
:::

## Bind Operations

::: {focus-on="cr-mediaPlanR26"}
> []{style="color:#000000; font-size: 230%"} 
> Las funciones bind_rows() y bind_cols() combinan datasets:
> <br><br>
> - bind_rows() une verticalmente (apila) datasets<br>
> - bind_cols() une horizontalmente datasets<br>
> - Manejan automáticamente tipos de columnas<br>
\
:::

::: {#cr-mediaPlanR26}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear datos de ejemplo
df1 <- mtcars[1:4, 1:3]
df2 <- mtcars[5:8, 1:3]
df3 <- data.frame(extra = letters[1:4])
# Unir datasets verticalmente
bind_rows(df1, df2)                                   # <1>
# Unir datasets con identificador
bind_rows(grupo1 = df1, grupo2 = df2, .id = "grupo")  # <2>
# Unir datasets horizontalmente
bind_cols(df1, df3)                                   # <3>
```

1. Une datasets verticalmente manteniendo tipos de columnas
2. Une verticalmente añadiendo identificador de origen
3. Une datasets horizontalmente por posición
:::

# **Funciones Auxiliares**

## Row Names Management

::: {focus-on="cr-mediaPlanR22"}
> []{style="color:#000000; font-size: 230%"} 
> Las funciones de manejo de nombres de filas facilitan su manipulación:
> <br><br>
> - Convertir una columna en nombres de fila: column_to_rownames()<br>
> - Convertir nombres de fila en una columna: rownames_to_column()<br>
> - Útiles para reorganizar la estructura de datos<br>
\
:::

::: {#cr-mediaPlanR22}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Convertir nombres de fila a columna
mtcars %>%
  tibble::rownames_to_column(var = "modelo") %>%      # <1>
  head(3)
# Convertir columna a nombres de fila
mtcars %>%
  tibble::rownames_to_column(var = "modelo") %>%
  tibble::column_to_rownames(var = "modelo") %>%      # <2>
  head(3)
```
1. Convierte nombres de fila a columna
2. Convierte columna a nombres de fila
:::

## NA Handling & Pull

::: {focus-on="cr-mediaPlanR25"}
> []{style="color:#000000; font-size: 230%"} 
> Funciones para manejar valores NA y extraer datos:
> <br><br>
> - coalesce() y replace_na() para manejar valores faltantes<br>
> - pull() para extraer una columna como vector<br>
> - Útiles para limpieza y extracción de datos<br>
\
:::

::: {#cr-mediaPlanR25}
---
code-annotations: hover
---
```{r class.source="bg-light", style="width:130%; font-size:85%"}
library(dplyr)
# Crear datos con NA
datos_na <- mtcars %>%
  dplyr::mutate(mpg = replace(mpg, c(1,3,5), NA))         # <1>

# Usar coalesce y replace_na
datos_na %>%
  dplyr::mutate(
    mpg_coal = coalesce(mpg, mean(mpg, na.rm = TRUE)),    # <2>
    mpg_repl = replace_na(mpg, 20)                        # <3>
  ) %>%                                             
  head(3)
# Usar pull para extraer valores
media_mpg <- mtcars %>%   
  dplyr::pull(mpg) %>%                                    # <4>              
  mean()
# Combinar pull con otras operaciones
peso_ref_por_cyl <- mtcars %>%
  dplyr::group_by(cyl) %>%
  dplyr::summarise(peso_ref = mean(wt)) %>%
  dplyr::pull(peso_ref, name = cyl)                       # <5>
```
1. Reemplaza con NA los valores de la columna mpg en las posiciones 1, 3 y 5 
2. Reemplaza NA en mpg por la media de mpg
3. Reemplaza NA en mpg por el valor 20
4. Extrae columna como vector
5. Pull con nombres
:::

___
