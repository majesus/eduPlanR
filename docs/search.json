[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dplyr",
    "section": "",
    "text": "dplyr es un paquete en R desarrollado por Hadley Wickham y su equipo que proporciona un conjunto de herramientas para la manipulación de datos. Es parte del ecosistema tidyverse, que es un conjunto de paquetes que comparten principios de diseño y filosofía en común para facilitar el trabajo con datos en R."
  },
  {
    "objectID": "index.html#pipe-operator",
    "href": "index.html#pipe-operator",
    "title": "dplyr",
    "section": "2.1 Pipe Operator (%>%)",
    "text": "2.1 Pipe Operator (%&gt;%)\n\n\nPipe Operator (%&gt;%)  El operador pipe (%&gt;%) de dplyr facilita la escritura de secuencias de operaciones:  - Encadena múltiples funciones de dplyr - Mejora la legibilidad del código - Evita la creación de variables intermedias\n\n\n\n\nlibrary(dplyr)\n# Sin usar pipes\n1resultado &lt;- dplyr::filter(mtcars, mpg &gt; 20)\nresultado &lt;- dplyr::select(resultado, mpg, cyl, hp)\nresultado &lt;- dplyr::arrange(resultado, desc(hp))\nhead(resultado, 3)\n\n# Usando pipes\nmtcars %&gt;%\n2  dplyr::filter(mpg &gt; 20) %&gt;%\n  dplyr::select(mpg, cyl, hp) %&gt;%\n  dplyr::arrange(desc(hp)) %&gt;%\n  head(3)\n\n\n1\n\nEncadenar operaciones sin pipes\n\n2\n\nEncadenar operaciones con pipes"
  },
  {
    "objectID": "index.html#select",
    "href": "index.html#select",
    "title": "dplyr",
    "section": "2.2 2.2. Select()",
    "text": "2.2 2.2. Select()\n\n\nSelect()  La función select() de dplyr manipula columnas de tres formas:  - Selecciona qué columnas mantener/descartar - Reordena su posición en el data frame - Renombra columnas en un solo paso\n\n\n\n\n\nlibrary(dplyr)\n# Selección simple de columnas\n1mtcars %&gt;%\n  dplyr::select(mpg, cyl, disp) %&gt;%\n  head(3)\n# Descarte simple de columnas\nmtcars %&gt;%\n2  dplyr::select(-mpg, -cyl, -disp) %&gt;%\n  head(3)\n# Selección con renombrado\nmtcars %&gt;%\n  dplyr::select(cilindros = cyl, consumo = mpg) %&gt;%\n  head(3)\n\n\n1\n\nFunción select()\n\n2\n\nDescartar columnas"
  },
  {
    "objectID": "index.html#select-helpers",
    "href": "index.html#select-helpers",
    "title": "dplyr",
    "section": "2.3 2.3. Select Helpers",
    "text": "2.3 2.3. Select Helpers\n\n\nSelect Helpers  Los helpers de select() permiten selección avanzada de columnas:  - all_of(), any_of(): Seleccionar usando vectores - starts_with(), ends_with(): Seleccionar por patronesde texto - everything(), last_col(): Seleccionar utilidades\n\n\n\n\n\nlibrary(dplyr)\n# Seleccionar con vectores de nombres\nvars_necesarias &lt;- c(\"mpg\", \"hp\", \"columna_inexistente\")\nmtcars %&gt;%\n1  dplyr::select(all_of(c(\"mpg\", \"hp\"))) %&gt;%\n  head(3)\n# Seleccionar ignorando inexistentes\nmtcars %&gt;%\n2  dplyr::select(any_of(vars_necesarias)) %&gt;%\n  head(3)\n# Seleccionar por patrones de texto\nmtcars %&gt;%\n3  dplyr::select(starts_with(\"c\"), contains(\"p\")) %&gt;%\n  head(3)\n# Funciones de utilidad\nmtcars %&gt;%\n4  dplyr::select(hp, everything()) %&gt;%\n  head(3)\nmtcars %&gt;%\n5  dplyr::select(mpg, last_col()) %&gt;%\n  head(3)\n\n\n1\n\nall_of() falla si alguna variable no existe\n\n2\n\nany_of() ignora variables inexistentes\n\n3\n\nSeleccionar columnas por patrones de texto\n\n4\n\neverything() selecciona todas las columnas restantes\n\n5\n\nlast_col() selecciona la última columna"
  },
  {
    "objectID": "index.html#filter",
    "href": "index.html#filter",
    "title": "dplyr",
    "section": "2.4 Filter()",
    "text": "2.4 Filter()\n\n\nFilter()  La función filter() de dplyr permite filtrar filas basadas en condiciones:  - Filtra filas que cumplen una condición lógica - Permite combinar múltiples condiciones - Soporta operaciones lógicas complejas\n\n\n\n\n\nlibrary(dplyr)\n# Filtrar filas donde mpg &gt; 20\nmtcars %&gt;%\n1  dplyr::filter(mpg &gt; 20) %&gt;%\n  head(3)\n# Filtrar filas con múltiples condiciones\nmtcars %&gt;%\n2  dplyr::filter(mpg &gt; 20, cyl == 4) %&gt;%\n  head(3)\n# Filtrar con operadores lógicos\nmtcars %&gt;%\n3  dplyr::filter(mpg &gt; 20 | hp &gt; 100) %&gt;%\n  head(3)\n\n\n1\n\nFiltrar filas con una condición\n\n2\n\nFiltrar filas con múltiples condiciones\n\n3\n\nFiltrar filas con operadores lógicos"
  },
  {
    "objectID": "index.html#filter-helpers",
    "href": "index.html#filter-helpers",
    "title": "dplyr",
    "section": "2.5 Filter Helpers",
    "text": "2.5 Filter Helpers\n\n\nFilter Helpers  Los helpers de filter() permiten filtrado más sofisticado:  - between(): Filtrar valores en un rango - near(): Comparar números con tolerancia - is.na(), !is.na(): Manejar valores NA\n\n\n\n\n\nlibrary(dplyr)\n# Filtrar valores en un rango\nmtcars %&gt;%\n1  dplyr::filter(between(mpg, 20, 25)) %&gt;%\n  head(3)\n\n# Comparar números con tolerancia\nmtcars %&gt;%\n2  dplyr::filter(near(mpg, 21, tol = 0.5)) %&gt;%\n  head(3)\n\n# Filtrar excluyendo NA\nmtcars %&gt;%\n3  dplyr::filter(!is.na(mpg)) %&gt;%\n  head(3)\n\n\n1\n\nUsar between() para rangos\n\n2\n\nUsar near() para comparaciones aproximadas\n\n3\n\nManejar valores NA"
  },
  {
    "objectID": "index.html#slice",
    "href": "index.html#slice",
    "title": "dplyr",
    "section": "2.6 Slice()",
    "text": "2.6 Slice()\n\n\nSlice()  La función slice() de dplyr selecciona filas por posición:  - Selecciona filas específicas por índice - Útil para tomar subconjuntos por posición - Puede seleccionar rangos o filas específicas\n\n\n\n\n\nlibrary(dplyr)\n# Seleccionar la primera fila\nmtcars %&gt;%\n1  dplyr::slice(1) %&gt;%\n  head(3)\n# Seleccionar múltiples filas\nmtcars %&gt;%\n2  dplyr::slice(1:3) %&gt;%\n  head(3)\n# Seleccionar filas aleatorias\nmtcars %&gt;%\n3  dplyr::slice_sample(n = 3) %&gt;%\n  head(3)\n\n\n1\n\nSeleccionar una fila específica\n\n2\n\nSeleccionar un rango de filas\n\n3\n\nSeleccionar filas aleatorias"
  },
  {
    "objectID": "index.html#slice-variations",
    "href": "index.html#slice-variations",
    "title": "dplyr",
    "section": "2.7 Slice Variations",
    "text": "2.7 Slice Variations\n\n\nSlice Variations  Las variantes de slice() ofrecen diferentes formas de selección:  - slice_head(), slice_tail(): Primeras/últimas filas - slice_min(), slice_max(): Filas basadas en valores - slice_sample(): Muestreo aleatorio\n\n\n\n\n\nlibrary(dplyr)\n# Seleccionar primeras filas\nmtcars %&gt;%\n1  dplyr::slice_head(n = 3)\n\n# Seleccionar las filas con valores máximos\nmtcars %&gt;%\n2  dplyr::slice_max(order_by = mpg, n = 3)\n\n# Seleccionar muestra aleatoria proporcional\nmtcars %&gt;%\n3  dplyr::slice_sample(prop = 0.1)\n\n\n1\n\nPrimeras n filas\n\n2\n\nTop n filas por valor\n\n3\n\nMuestra aleatoria"
  },
  {
    "objectID": "index.html#arrange",
    "href": "index.html#arrange",
    "title": "dplyr",
    "section": "2.8 Arrange()",
    "text": "2.8 Arrange()\n\n\nArrange()  La función arrange() de dplyr ordena las filas de un data frame:  - Ordena en orden ascendente o descendente - Puede ordenar por múltiples columnas - Mantiene todas las filas\n\n\n\n\n\nlibrary(dplyr)\n# Ordenar por mpg ascendente\nmtcars %&gt;%\n1  dplyr::arrange(mpg) %&gt;%\n  head(3)\n# Ordenar por hp descendente\nmtcars %&gt;%\n2  dplyr::arrange(desc(hp)) %&gt;%\n  head(3)\n# Ordenar por cyl asc y mpg desc\nmtcars %&gt;%\n3  dplyr::arrange(cyl, desc(mpg)) %&gt;%\n  head(3)\n\n\n1\n\nOrdenar en orden ascendente\n\n2\n\nOrdenar en orden descendente\n\n3\n\nOrdenar por múltiples columnas"
  },
  {
    "objectID": "index.html#distinct",
    "href": "index.html#distinct",
    "title": "dplyr",
    "section": "2.9 Distinct()",
    "text": "2.9 Distinct()\n\n\nDistinct()  La función distinct() de dplyr elimina filas duplicadas:  - Retiene filas únicas - Puede especificar columnas para la unicidad - Útil para limpiar datos\n\n\n\n\n\nlibrary(dplyr)\n# Eliminar filas duplicadas basadas en todas las columnas\nmtcars %&gt;%\n1  dplyr::distinct() %&gt;%\n  head(3)\n# Eliminar duplicados basados en una columna\nmtcars %&gt;%\n2  dplyr::distinct(cyl, .keep_all = TRUE) %&gt;%\n  head(3)\n# Eliminar duplicados basados en múltiples columnas\nmtcars %&gt;%\n3  dplyr::distinct(cyl, gear, .keep_all = TRUE) %&gt;%\n  head(3)\n\n\n1\n\nEliminar duplicados en todas las columnas\n\n2\n\nEliminar duplicados basados en una columna\n\n3\n\nEliminar duplicados basados en múltiples columnas"
  },
  {
    "objectID": "index.html#distinct-avanzado",
    "href": "index.html#distinct-avanzado",
    "title": "dplyr",
    "section": "2.10 Distinct() Avanzado",
    "text": "2.10 Distinct() Avanzado\n\n\nDistinct() Avanzado  Opciones avanzadas de distinct() para manejar duplicados:  - .keep_all: Mantener todas las columnas - Selección de columnas específicas - Combinación con otras funciones dplyr\n\n\n\n\n\nlibrary(dplyr)\n# Mantener todas las columnas al eliminar duplicados\nmtcars %&gt;%\n1  dplyr::distinct(cyl, .keep_all = TRUE) %&gt;%\n  head(3)\n\n# Distinción por múltiples columnas\nmtcars %&gt;%\n2  dplyr::distinct(cyl, gear, carb) %&gt;%\n  head(3)\n\n# Combinar con arrange\nmtcars %&gt;%\n  dplyr::arrange(desc(mpg)) %&gt;%\n3  dplyr::distinct(cyl, .keep_all = TRUE) %&gt;%\n  head(3)\n\n\n1\n\nMantener todas las columnas\n\n2\n\nDistinción múltiple\n\n3\n\nCombinación con arrange"
  },
  {
    "objectID": "index.html#mutate-básico",
    "href": "index.html#mutate-básico",
    "title": "dplyr",
    "section": "3.1 Mutate() Básico",
    "text": "3.1 Mutate() Básico\n\n\nMutate() Básico  La función mutate() de dplyr añade nuevas columnas o transforma existentes:  - Crea nuevas columnas basadas en cálculos - Modifica columnas existentes - Permite el uso de funciones de resumen\n\n\n\n\n\nlibrary(dplyr)\n# Crear una nueva columna de eficiencia\nmtcars %&gt;%\n1  dplyr::mutate(eficiencia = mpg / wt) %&gt;%\n  head(3)\n# Modificar una columna existente\nmtcars %&gt;%\n2  dplyr::mutate(mpg = mpg * 1.1) %&gt;%\n  head(3)\n# Usar funciones dentro de mutate\nmtcars %&gt;%\n3  dplyr::mutate(log_hp = log(hp)) %&gt;%\n  head(3)\n\n\n1\n\nCrear nuevas columnas\n\n2\n\nModificar columnas existentes\n\n3\n\nAplicar funciones a columnas"
  },
  {
    "objectID": "index.html#mutate-avanzado",
    "href": "index.html#mutate-avanzado",
    "title": "dplyr",
    "section": "3.2 Mutate() Avanzado",
    "text": "3.2 Mutate() Avanzado\n\n\nMutate() Avanzado  Funciones avanzadas para manipulación de datos:  - case_when() y if_else() para transformaciones condicionales - across() para aplicar funciones a múltiples columnas - between(), lag() y lead() para análisis de valores\n\n\n\n\n\nlibrary(dplyr)\n# Usar case_when y if_else\nmtcars %&gt;%\n  dplyr::mutate(\n    potencia = case_when(\n      hp &lt; 100 ~ \"Baja\",\n      hp &lt; 200 ~ \"Media\",\n      TRUE ~ \"Alta\"\n    ),\n    eficiente = if_else(mpg &gt; 20, \"Sí\", \"No\")\n1  ) %&gt;%\n  head(3)\n\n# Usar across para múltiples columnas\nmtcars %&gt;%\n2  dplyr::mutate(across(c(mpg, hp), round)) %&gt;%\n  head(3)\n\n# Usar between, lag y lead\nmtcars %&gt;%\n  dplyr::arrange(mpg) %&gt;%\n  dplyr::mutate(\n    en_rango = between(mpg, 20, 25),\n    mpg_anterior = lag(mpg),\n    mpg_siguiente = lead(mpg)\n3  ) %&gt;%\n  head(3)\n\n\n1\n\nTransformaciones condicionales\n\n2\n\nAplicar función a múltiples columnas\n\n3\n\nAnálisis de valores y secuencias"
  },
  {
    "objectID": "index.html#transmute",
    "href": "index.html#transmute",
    "title": "dplyr",
    "section": "3.3 Transmute()",
    "text": "3.3 Transmute()\n\n\nTransmute()  La función transmute() de dplyr crea nuevas columnas y descarta las existentes:  - Similar a mutate(), pero solo mantiene las nuevas columnas - Útil para crear subconjuntos de datos transformados - Simplifica el data frame resultante\n\n\n\n\n\nlibrary(dplyr)\n# Crear nuevas columnas y descartar las originales\nmtcars %&gt;%\n  dplyr::transmute(consumo = mpg * 1.1,\n1                   potencia = hp / 2) %&gt;%\n  head(3)\n# Transmute con condiciones\nmtcars %&gt;%\n  dplyr::transmute(consumo = ifelse(mpg &gt; 20, \"Alto\", \"Bajo\"),\n2                   cilindros = cyl) %&gt;%\n  head(3)\n# Transmute con funciones\nmtcars %&gt;%\n  dplyr::transmute(log_hp = log(hp),\n3                   sqrt_disp = sqrt(disp)) %&gt;%\n  head(3)\n\n\n1\n\nCrear nuevas columnas básicas\n\n2\n\nTransmute con condiciones\n\n3\n\nTransmute usando funciones"
  },
  {
    "objectID": "index.html#rename",
    "href": "index.html#rename",
    "title": "dplyr",
    "section": "3.4 Rename()",
    "text": "3.4 Rename()\n\n\nRename()  La función rename() de dplyr cambia el nombre de columnas específicas:  - Renombra una o más columnas - No afecta otras columnas - Mantiene el orden de las columnas\n\n\n\n\n\nlibrary(dplyr)\n# Renombrar una columna\nmtcars %&gt;%\n1  dplyr::rename(consumo = mpg) %&gt;%\n  head(3)\n# Renombrar múltiples columnas\nmtcars %&gt;%\n2  dplyr::rename(consumo = mpg, cilindros = cyl) %&gt;%\n  head(3)\n# Renombrar y seleccionar\nmtcars %&gt;%\n  dplyr::rename(consumo = mpg) %&gt;%\n3  dplyr::select(consumo, everything()) %&gt;%\n  head(3)\n\n\n1\n\nRenombrar una sola columna\n\n2\n\nRenombrar múltiples columnas\n\n3\n\nRenombrar y reordenar columnas"
  },
  {
    "objectID": "index.html#rename_with",
    "href": "index.html#rename_with",
    "title": "dplyr",
    "section": "3.5 Rename_with()",
    "text": "3.5 Rename_with()\n\n\nRename_with()  La función rename_with() de dplyr aplica una función a los nombres de columnas:  - Transforma nombres de columnas de manera programática - Útil para estandarizar o modificar nombres - Soporta funciones como tolower, toupper, etc.\n\n\n\n\n\nlibrary(dplyr)\n# Convertir nombres de columnas a minúsculas\nmtcars %&gt;%\n1  dplyr::rename_with(tolower) %&gt;%\n  head(3)\n# Añadir prefijo a nombres de columnas\nmtcars %&gt;%\n2  dplyr::rename_with(~ paste0(\"var_\", .)) %&gt;%\n  head(3)\n# Aplicar una función personalizada\nmtcars %&gt;%\n3  dplyr::rename_with(function(x) toupper(x)) %&gt;%\n  head(3)\n\n\n1\n\nTransformar nombres a minúsculas\n\n2\n\nAñadir prefijos a nombres\n\n3\n\nAplicar funciones personalizadas a nombres"
  },
  {
    "objectID": "index.html#summarise-básico",
    "href": "index.html#summarise-básico",
    "title": "dplyr",
    "section": "4.1 Summarise() Básico",
    "text": "4.1 Summarise() Básico\n\n\nSummarise() Básico  La función summarise() de dplyr resume datos mediante cálculos:  - Calcula estadísticas resumidas - Se usa comúnmente con group_by() - Reduce el data frame a una sola fila por grupo\n\n\n\n\n\nlibrary(dplyr)\n# Resumir con promedio de mpg\nmtcars %&gt;%\n1  dplyr::summarise(promedio_mpg = mean(mpg)) %&gt;%\n  head(3)\n# Resumir con múltiples estadísticas\nmtcars %&gt;%\n  dplyr::summarise(promedio_mpg = mean(mpg),\n2                   max_hp = max(hp)) %&gt;%\n  head(3)\n# Resumir por grupos\nmtcars %&gt;%\n  dplyr::group_by(cyl) %&gt;%\n  dplyr::summarise(promedio_mpg = mean(mpg),\n3                   conteo = n()) %&gt;%\n  head(3)\n\n\n1\n\nResumir con una sola estadística\n\n2\n\nResumir con múltiples estadísticas\n\n3\n\nResumir por grupos"
  },
  {
    "objectID": "index.html#summarise-avanzado",
    "href": "index.html#summarise-avanzado",
    "title": "dplyr",
    "section": "4.2 Summarise() Avanzado",
    "text": "4.2 Summarise() Avanzado\n\n\nSummarise() Avanzado  Técnicas avanzadas de resumen:  - summarise_all(): Aplicar a todas las columnas - summarise_if(): Aplicar condicionalmente - summarise_at(): Aplicar a columnas específicas\n\n\n\n\n\nlibrary(dplyr)\n# Resumir todas las columnas numéricas\nmtcars %&gt;%\n1  dplyr::summarise_all(list(mean = mean, sd = sd)) %&gt;%\n  head(3)\n\n# Resumir columnas que cumplen condición\nmtcars %&gt;%\n  dplyr::summarise_if(is.numeric, \n2                      list(mean = mean, sd = sd)) %&gt;%\n  head(3)\n\n# Resumir columnas específicas con múltiples funciones\nmtcars %&gt;%\n  dplyr::summarise_at(vars(mpg, hp),\n3                      list(min = min, max = max)) %&gt;%\n  head(3)\n\n\n1\n\nResumir todas las columnas\n\n2\n\nResumir condicionalmente\n\n3\n\nResumir columnas específicas"
  },
  {
    "objectID": "index.html#summarise_at",
    "href": "index.html#summarise_at",
    "title": "dplyr",
    "section": "4.3 Summarise_at()",
    "text": "4.3 Summarise_at()\n\n\nSummarise_at()  La función summarise_at() de dplyr aplica resúmenes a columnas específicas:  - Aplica funciones de resumen a un conjunto de columnas - Flexibilidad en las funciones utilizadas - Facilita resúmenes personalizados\n\n\n\n\n\nlibrary(dplyr)\n# Resumir múltiples columnas con mean\nmtcars %&gt;%\n1  dplyr::summarise_at(vars(mpg, hp), mean) %&gt;%\n  head(3)\n# Resumir con funciones personalizadas\nmtcars %&gt;%\n2  dplyr::summarise_at(vars(mpg, hp), list(promedio = mean, maximo = max)) %&gt;%\n  head(3)\n# Resumir por grupos con summarise_at\nmtcars %&gt;%\n  dplyr::group_by(cyl) %&gt;%\n3  dplyr::summarise_at(vars(mpg, hp), mean) %&gt;%\n  head(3)\n\n\n1\n\nResumir múltiples columnas con una función\n\n2\n\nResumir con múltiples funciones\n\n3\n\nResumir por grupos con summarise_at"
  },
  {
    "objectID": "index.html#group_by-básico",
    "href": "index.html#group_by-básico",
    "title": "dplyr",
    "section": "4.4 Group_by() Básico",
    "text": "4.4 Group_by() Básico\n\n\nGroup_by() Básico  La función group_by() de dplyr agrupa el data frame para operaciones posteriores:  - Agrupa filas basadas en una o más columnas - Es esencial para cálculos por grupo - No modifica el orden de las filas\n\n\n\n\n\nlibrary(dplyr)\n# Agrupar por número de cilindros\nmtcars %&gt;%\n1  dplyr::group_by(cyl) %&gt;%\n  dplyr::summarise(promedio_mpg = mean(mpg)) %&gt;%\n  head(3)\n# Agrupar por cilindros y transmisión\nmtcars %&gt;%\n2  dplyr::group_by(cyl, am) %&gt;%\n  dplyr::summarise(promedio_mpg = mean(mpg)) %&gt;%\n  head(3)\n# Usar group_by con mutate\nmtcars %&gt;%\n  dplyr::group_by(cyl) %&gt;%\n3  dplyr::mutate(promedio_mpg = mean(mpg)) %&gt;%\n  head(3)\n\n\n1\n\nAgrupar por una columna\n\n2\n\nAgrupar por múltiples columnas\n\n3\n\nAgrupar y mutar"
  },
  {
    "objectID": "index.html#group_by-avanzado",
    "href": "index.html#group_by-avanzado",
    "title": "dplyr",
    "section": "4.5 Group_by() Avanzado",
    "text": "4.5 Group_by() Avanzado\n\n\nGroup_by() Avanzado  Técnicas avanzadas de agrupación:  - group_by() con múltiples columnas - group_modify() para operaciones complejas - ungroup() para eliminar agrupaciones\n\n\n\n\n\nlibrary(dplyr)\n# Agrupación múltiple con cálculos\nmtcars %&gt;%\n  dplyr::group_by(cyl, am) %&gt;%\n  dplyr::summarise(\n    mpg_mean = mean(mpg),\n    hp_sd = sd(hp)\n1  ) %&gt;%\n  head(3)\n\n# Usar group_modify para operaciones complejas\nmtcars %&gt;%\n  dplyr::group_by(cyl) %&gt;%\n2  dplyr::group_modify(~ head(.x, 2)) %&gt;%\n  head(3)\n\n# Desagrupar y realizar operaciones\nmtcars %&gt;%\n  dplyr::group_by(cyl) %&gt;%\n  dplyr::mutate(mpg_mean = mean(mpg)) %&gt;%\n3  dplyr::ungroup() %&gt;%\n  dplyr::mutate(overall_diff = mpg - mean(mpg)) %&gt;%\n  head(3)\n\n\n1\n\nAgrupación múltiple\n\n2\n\nOperaciones complejas por grupo\n\n3\n\nDesagrupar para cálculos globales"
  },
  {
    "objectID": "index.html#count",
    "href": "index.html#count",
    "title": "dplyr",
    "section": "4.6 Count()",
    "text": "4.6 Count()\n\n\nCount()  La función count() de dplyr cuenta las ocurrencias de combinaciones de variables:  - Cuenta frecuencias de combinaciones únicas - Simplifica group_by() y summarise(n = n()) - Útil para análisis exploratorio\n\n\n\n\n\nlibrary(dplyr)\n# Contar el número de cilindros\nmtcars %&gt;%\n1  dplyr::count(cyl) %&gt;%\n  head(3)\n# Contar combinaciones de cilindros y gears\nmtcars %&gt;%\n2  dplyr::count(cyl, gear) %&gt;%\n  head(3)\n# Contar y ordenar por frecuencia\nmtcars %&gt;%\n3  dplyr::count(cyl, sort = TRUE) %&gt;%\n  head(3)\n\n\n1\n\nContar una variable\n\n2\n\nContar múltiples variables\n\n3\n\nContar y ordenar por frecuencia"
  },
  {
    "objectID": "index.html#join-functions-básicas",
    "href": "index.html#join-functions-básicas",
    "title": "dplyr",
    "section": "5.1 Join Functions Básicas",
    "text": "5.1 Join Functions Básicas\n\n\nJoin Functions Básicas  Las funciones de join en dplyr combinan data frames basándose en claves:  - left_join(), right_join(), inner_join(), full_join() - Unen data frames por columnas comunes - Manejan duplicados y filas no coincidentes\n\n\n\n\n\nlibrary(dplyr)\n# Crear un data frame de fabricantes\nfabricantes &lt;- data.frame(\n  car = rownames(mtcars),\n  fabricante = c(\"Mazda\", \"Mazda\", \"Datsun\", \"Hornet\", \"Hornet\", \n                 \"Valiant\", \"Duster\", \"Merc\", \"Merc\", \"Merc\", \n                 \"Merc\", \"Merc\", \"Merc\", \"Merc\", \"Merc\", \n                 \"Merc\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \n                 \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \n                 \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \n                 \"Ferrari\", \"Ferrari\"))\n\n# left_join ejemplo\nmtcars %&gt;%\n1  dplyr::left_join(fabricantes, by = c(\"rownames(mtcars)\" = \"car\")) %&gt;%\n  head(3)\n\n# inner_join ejemplo\nmtcars %&gt;%\n2  dplyr::inner_join(fabricantes, by = c(\"rownames(mtcars)\" = \"car\")) %&gt;%\n  head(3)\n\n# full_join ejemplo\nmtcars %&gt;%\n3  dplyr::full_join(fabricantes, by = c(\"rownames(mtcars)\" = \"car\")) %&gt;%\n  head(3)\n\n\n1\n\nleft_join: mantiene todas las filas del primer data frame\n\n2\n\ninner_join: mantiene solo las filas con claves coincidentes\n\n3\n\nfull_join: mantiene todas las filas de ambos data frames"
  },
  {
    "objectID": "index.html#join-functions-avanzadas",
    "href": "index.html#join-functions-avanzadas",
    "title": "dplyr",
    "section": "5.2 Join Functions Avanzadas",
    "text": "5.2 Join Functions Avanzadas\n\n\nJoin Functions Avanzadas  Funciones adicionales de join para combinar datasets:  - right_join() mantiene todas las filas del segundo dataset - semi_join() mantiene filas que tienen coincidencias - anti_join() mantiene filas sin coincidencias\n\n\n\n\n\nlibrary(dplyr)\n# Crear datos de ejemplo\nfabricantes &lt;- data.frame(\n  cyl = c(4, 6, 8),\n  tipo = c(\"Económico\", \"Medio\", \"Deportivo\")\n)\n\n# Usar right_join\nmtcars %&gt;%\n1  dplyr::right_join(fabricantes, by = \"cyl\") %&gt;%\n  head(3)\n\n# Usar semi_join\nmtcars %&gt;%\n2  dplyr::semi_join(fabricantes, by = \"cyl\") %&gt;%\n  head(3)\n\n# Usar anti_join\nmtcars %&gt;%\n3  dplyr::anti_join(fabricantes, by = \"cyl\") %&gt;%\n  head(3)\n\n\n1\n\nMantiene todas las filas de fabricantes\n\n2\n\nSolo filas de mtcars con coincidencias\n\n3\n\nSolo filas de mtcars sin coincidencias"
  },
  {
    "objectID": "index.html#row-names-management",
    "href": "index.html#row-names-management",
    "title": "dplyr",
    "section": "6.1 Row Names Management",
    "text": "6.1 Row Names Management\n\n\nRow Names Management  Las funciones de manejo de nombres de filas facilitan su manipulación:  - Convertir una columna en nombres de fila: column_to_rownames() - Conbertir nombres de fila en una columna: rownames_to_column() - Útiles para reorganizar la estructura de datos\n\n\n\n\n\nlibrary(dplyr)\n# Convertir nombres de fila a columna\nmtcars %&gt;%\n1  tibble::rownames_to_column(var = \"modelo\") %&gt;%\n  head(3)\n\n# Convertir columna a nombres de fila\nmtcars %&gt;%\n  tibble::rownames_to_column(var = \"modelo\") %&gt;%\n2  tibble::column_to_rownames(var = \"modelo\") %&gt;%\n  head(3)\n\n# Combinar con otras operaciones\nmtcars %&gt;%\n  tibble::rownames_to_column(var = \"modelo\") %&gt;%\n3  dplyr::select(modelo, mpg, hp) %&gt;%\n  head(3)\n\n\n1\n\nConvertir nombres de fila a columna\n\n2\n\nConvertir columna a nombres de fila\n\n3\n\nCombinar con otras operaciones"
  },
  {
    "objectID": "index.html#na-handling-pull",
    "href": "index.html#na-handling-pull",
    "title": "dplyr",
    "section": "6.2 NA Handling & Pull",
    "text": "6.2 NA Handling & Pull\n\n\nNA Handling & Pull  Funciones para manejar valores NA y extraer datos:  - coalesce() y replace_na() para manejar valores faltantes - pull() para extraer una columna como vector - Útiles para limpieza y extracción de datos\n\n\n\n\n\nlibrary(dplyr)\n# Crear datos con NA\ndatos_na &lt;- mtcars %&gt;%\n  dplyr::mutate(mpg = replace(mpg, c(1,3,5), NA))\n\n# Usar coalesce y replace_na\ndatos_na %&gt;%\n  dplyr::mutate(\n1    mpg_coal = coalesce(mpg, mean(mpg, na.rm = TRUE)),\n2    mpg_repl = replace_na(mpg, 20)\n  ) %&gt;%                                             \n  head(3)\n\n# Usar pull para extraer valores\nmedia_mpg &lt;- mtcars %&gt;%   \n3  dplyr::pull(mpg) %&gt;%\n  mean()\n\n# Combinar pull con otras operaciones\npeso_ref_por_cyl &lt;- mtcars %&gt;%\n  dplyr::group_by(cyl) %&gt;%\n  dplyr::summarise(peso_ref = mean(wt)) %&gt;%\n4  dplyr::pull(peso_ref, name = cyl)\n\n\n1\n\nReemplaza NA en mpg por la media de mpg\n\n2\n\nReemplaza NA en mpg por el valor 20\n\n3\n\nExtraer columna como vector\n\n4\n\nPull con nombres"
  }
]